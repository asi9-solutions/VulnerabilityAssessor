# This module will apply vulnerability assessor magic on the combined report

import json
import copy

#Grab the combined vulnerability report
with open("combined_bug_report.json", "r") as read_file:
    combined_report = json.load(read_file)

#read assessor report template
with open("assessor_report_template.json", "r") as read_file:
    assessor_report_template = json.load(read_file)

#read ALE reference data
with open("ALE_ref.json", "r") as read_file:
    ale_ref = json.load(read_file)

#create local vars
combined_report_local = copy.deepcopy(combined_report)
assessor_report_template_local = copy.deepcopy(assessor_report_template)
ale_ref_local = copy.deepcopy(ale_ref)
issue_list = []
new_dic = {}
vuln_ID = 0
issue_count = 0

#Add SAST1 report to combined report
for p in combined_report_local['issues']:
    assessed_vulnerability = {
            "vulnerabilityID":p['vulnerabilityID'],
            "vulnerabilityCategory":p['vulnerabilityCategory'],
            "vulnerabilityCWE":p['vulnerabilityCWE'],
            "vulnerabilityFile":p['vulnerabilityFile'],
            "vulnerabilitySeverity":p['vulnerabilitySeverity'], 
            "vulnerabilityFunction":p['vulnerabilityFunction'],
            "vulnerabilityTool":p['vulnerabilityTool'],
            "vulnerabilityRating":"low"
            }
#    print('looking at new issue')
#Add logic to calculate vulnerability rating
    # tool weight * ALE rating * tool severity
    # find ALE rating
    ale_cwe_key = p['vulnerabilityCategory']+'_'+p['vulnerabilityCWE']
    #print(ale_ref_local['references'])
    #break
    #print(ale_cwe_key)
    for ref in ale_ref_local['references']:
        if (ref['category'] == ale_cwe_key):
            ale = ref['ale']
            break
    ale = float(ale)
    ale_score = 0
    if (ale > 1000000):
        ale_score = 3
    elif (ale > 500000):
        ale_score = 2
    else:
        ale_score = 1
#    print('ale_score')
#    print(ale_score)

    issue_tool = p['vulnerabilityTool']

    for ref in ale_ref_local['toolWeight']:
        if(issue_tool == ref['tool']):
                tool_weight = ref['weight']
                break
    #print('issue_tool')
    #print(issue_tool)
#    print('tool weight')
#    print(tool_weight)

    if (p['vulnerabilitySeverity'] == "high"):
        tool_severity = 3
    elif (p['vulnerabilitySeverity'] == "medium"):
        tool_severity = 2
    else:
        tool_severity = 1
#    print('tool severity')
#    print(tool_severity)
    ale_score = int(ale_score)
    tool_severity = int(tool_severity)
    tool_weight = int(tool_weight)
    score = 2*ale_score + tool_severity + tool_weight
    print("score is.......................")
    print(score)

    if (score > 10):
        assessed_vulnerability['vulnerabilityRating'] = "critical"
    elif (score > 9):
        assessed_vulnerability['vulnerabilityRating'] = "high"
    elif (score > 7):
        assessed_vulnerability['vulnerabilityRating'] = "medium"
    else:
        assessed_vulnerability['vulnerabilityRating'] = "low"
    
    issue_count = issue_count + 1
    assessor_report_template_local['issueCount'] = issue_count

    assessor_report_template_local['issues'].append(assessed_vulnerability)
 
#vuln_ID += 1
#combined_report['issueCount'] = vuln_ID 

#write out ale_ref for sanity check
#with open("ale_ref_check.json", "w") as write_file:
#    json.dump(ale_ref_local, write_file, indent=4)

#write out assessor report
with open("vulnerability_assessor_report.json", "w") as write_file:
    json.dump(assessor_report_template_local, write_file, indent=4)


