# This module is a private module
# This module will generate sample json reports for testing purposes

import json
import copy

#Grab the template report
with open("combined_bug_report_template.json", "r") as read_file:
    combined_report = json.load(read_file)

#Grab the report from the SAST1 tool
with open("SAST1_report.json", "r") as read_file:
    SAST1_report = json.load(read_file)

#Grab the report from the SAST2 (findsecbugs) tool
with open("SAST2_report.json", "r") as read_file:
    SAST2_report = json.load(read_file)

#Grab the report from the Nessus
with open("nessus_scan.json", "r") as read_file:
    nessus_report = json.load(read_file)

#create local vars
SAST1_report_local = copy.deepcopy(SAST1_report)
SAST2_report_local = copy.deepcopy(SAST2_report)
nessus_report_local = copy.deepcopy(nessus_report)
SAST1_issue_list = []
SAST2_issue_list = []
new_dic = {}
vuln_ID = 1
vuln_ID_2 = 20001
vuln_ID_3 = 30001

#Add SAST1 report to combined report
for p in SAST1_report_local['issues']:
    SAST1_issue = {
            "vulnerabilityID": p['merge_key'],
            "vulnerabilityCategory":p['checker'],
            "vulnerabilityCWE":p['cwe'],
            "vulnerabilityFile": p['file'],
            "vulnerabilityFunction":p['function'],
            "vulnerabilityTool": "SAST1",
            "vulnerabilitySeverity":p['severity']
            }
    combined_report['issues'].append(SAST1_issue)
    combined_report['issueCount'] = vuln_ID
    vuln_ID += 1


#Add SAST2 report to combined report
for p in SAST2_report_local['BugInstance']:
    SAST2_issue = {
            "vulnerabilityID": vuln_ID_2,
            "vulnerabilityCategory":p['abbrev'],
            "vulnerabilityCWE": 0,
            "vulnerabilityFile": p['Class']['SourceLine']['sourcepath'],
            "vulnerabilityFunction":p['Class']['classname'],
            "vulnerabilityTool": "findsecbugs",
            "vulnerabilitySeverity":"low"
            }
    rank = p['rank']
    rank = int(rank)
    #print(rank)
    if (rank > 14):
        SAST2_issue['vulnerabilitySeverity']="high"
    elif (rank > 10):
        SAST2_issue['vulnerabilitySeverity']="medium"
    else:
        SAST2_issue['vulnerabilitySeverity']="low"
    #print(SAST2_issue['vulnerabilitySeverity'])
    #identify CWE
    bugtype = p['abbrev']
    #CRLF_INJECTION_LOGS   
    if (bugtype == "SECCRLFLOG"):
        SAST2_issue['vulnerabilityCWE'] = "93"
    #PATH_TRAVERSAL_IN  
    elif (bugtype == "SECPTI"):
        SAST2_issue['vulnerabilityCWE'] = "330"
    #SPRING_ENDPOINT
    elif (bugtype == "SECSC"):
        SAST2_issue['vulnerabilityCWE'] = "807"
    #LESS_SECURE_ALGORITHM
    elif (bugtype == "SECSEL"):
        SAST2_issue['vulnerabilityCWE'] = "757"
    #SPRING_FILE_DISCLOSURE  
    elif (bugtype == "SECSF"):
        SAST2_issue['vulnerabilityCWE'] = "285"
    #SERVLET_HEADER  
    elif (bugtype == "SECSH"):
        SAST2_issue['vulnerabilityCWE'] = "444"
    #SPRING_CSRF_PROTECTION_DISABLED  
    elif (bugtype == "SECSPRCSRFPD"):
        SAST2_issue['vulnerabilityCWE'] = "352"
    #SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING  
    elif (bugtype == "SECSPRCSRFURM"):
        SAST2_issue['vulnerabilityCWE'] = "352"
    #XSS_SERVLET  
    elif (bugtype == "SECXSS2"):
        SAST2_issue['vulnerabilityCWE'] = "79"
    else:
        pass
    ##end identify CWE
    combined_report['issues'].append(SAST2_issue)
    combined_report['issueCount'] = vuln_ID
    vuln_ID_2 += 1

#    print('checking for nessus json objects')
#    print(nessus_report_local['Report'])
    #"vulnerabilityFile": p['Class']['SourceLine']['sourcepath'],
#Add Nessus report to combined report
for p in nessus_report_local['Report']['ReportHost']['ReportItem']:
    #check for issues in nessus report 
    if (int(p['@severity'])>0):
        #print(p['@severity'])
        nessus_issue = {
                "vulnerabilityID": p["@pluginID"],
                "vulnerabilityCategory":p["@pluginName"],
                "vulnerabilityCWE":"200",
                "vulnerabilityFile": p["@pluginFamily"],
                "vulnerabilityFunction":p["@protocol"],
                "vulnerabilityTool": "Nessus",
                "vulnerabilitySeverity":p['@severity']
                }
        if (int(p['@severity']) == 1):
            nessus_issue["vulnerabilitySeverity"] = "medium"
        elif(int(p['@severity']) > 2):
            nessus_issue["vulnerabilitySeverity"] = "high"
        else:
            nessus_issue["vulnerabilitySeverity"] = "low"
    #add to combined report
        combined_report['issues'].append(nessus_issue)
    #advance
    vuln_ID_3 += 1

#    #break
#    nessus_issue = {
#            "vulnerabilityID": p['merge_key'],
#            "vulnerabilityCategory":p['checker'],
#            "vulnerabilityCWE":p['cwe'],
#            "vulnerabilityFile": p['file'],
#            "vulnerabilityFunction":p['function'],
#            "vulnerabilityTool": "SAST1",
#            "vulnerabilitySeverity":p['severity']
#            }
#    combined_report['issues'].append(nessus_issue)
#    combined_report['issueCount'] = vuln_ID_3
#    vuln_ID_3 += 1
#    print(p)
#    pass 

#with open("combined_bug_report.json", "w") as write_file:
#    json.dump(combined_report, write_file, indent=4)
with open("combined_bug_report.json", "w") as write_file:
    json.dump(combined_report, write_file, indent=4)


